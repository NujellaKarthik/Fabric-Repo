/*
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * Write your model definitions here
 */

namespace org.jio.pharma

/**
 * The type of pharmaceutical product being shipped
 */
enum ProductType {
  o ANTIPYRETICS
  o ANALGESICS
  o ANTIBIOTICS
  o ANTISEPTICS
  o TRANQUILIZERS
}

/**
 * The status of a shipment
 */
enum ShipmentStatus {
  o CREATED
  o IN_TRANSIT
  o ARRIVED
}

/**
 * The status of a issue
 */
enum IssueStat {
  o PENDING
  o APPROVED
  o DENIED
}

/**
 * Directions of the compass
 */
enum CompassDirection {
  o N
  o E
  o W
  o S
}

/**
 * An abstract transaction that is related to a Shipment
 */
abstract transaction ShipmentTransaction {
  --> Shipment shipment
}

/**
 * An temperature reading for a shipment. E.g. received from a
 * device within a temperature controlled shipping container
 */
transaction TemperatureReading extends ShipmentTransaction {
  o String deviceID
  o Double temperature
  o DateTime time
  o Double humidity 
}

/**
 * A GPS reading for a shipment. E.g. received from a device
 * within a shipping container
 */
transaction GpsReading extends ShipmentTransaction {
  o String deviceID
  o DateTime time
  o String latitude
  o String longitude
  o Long speed
}

/**
 * A Shipment has been packed and is ready for pickup
 */
transaction ShipmentPacked extends ShipmentTransaction {
  o DateTime packedDateTime optional
}

/**
 * A Shipment has been picked up
 */
transaction ShipmentPickedup extends ShipmentTransaction {
}

/**
 * A Shipment has been loaded for transport
 */
transaction ShipmentLoaded extends ShipmentTransaction {
}

/**
 * A Shipment has been arrived at the port
 */
transaction ShipmentInPort extends ShipmentTransaction {
}

/**
 * A notification that a shipment has been received by the
 * buyer and that funds should be transferred from the buyer
 * to the sender to pay for the shipment.
 */
transaction ShipmentReceived extends ShipmentTransaction {
  o DateTime receivedDateTime optional
  o Boolean isValid
  o String invalidPills
}

/**
 * A notification that a shipment that had been invalidated has been fixed
 */
transaction issueResolved extends ShipmentTransaction {
  o String resolvedPill
}

/**
 * Defines a contract between a seller and a buyer to ship using
 * a Shipper, paying a set unit price. The unit price is multiplied by
 * a penality factor proportional to the deviation from the min and max
 * negotiated temperatures for the shipment.
 */
asset Contract identified by contract_Id {
  o String contract_Id
  --> Manufacturer manufacturer
  --> Wholesaler wholesaler
  --> Shipper shipper
  o DateTime arrivalDateTime
  o Double minTemperature
  o Double maxTemperature
  o Double minPenaltyFactor
  o Double maxPenaltyFactor
}

/**
 * A shipment being tracked as an asset on the ledger
 */
asset Shipment identified by shipment_Id {
  o String shipment_Id
  o ShipmentStatus status
  o ProductType type
  o Boolean validStatus
  o TemperatureReading[] temperatureReadings optional
  o GpsReading[] gpsReadings optional
  --> Pills pills_Id
  --> Contract contract
  
}

asset Pills identified by pills_Id {
  o String pills_Id
  o String pills_Name
  o Long unitCount
  o Long unitPrice
  o String composition
  o DateTime manufacturedDateTime
  o DateTime expiryDateTime
  o Boolean validStatus
  o IssueStatus issue optional
  o String validMessage optional
}

/**
 * A concept for a simple street address
 */
concept Address {
  o String city optional
  o String country
  o String street optional
  o String zip optional
}

/**
 * A concept for a issue resolving
 */
concept IssueStatus {
  o IssueStat sender
  o IssueStat receiver
}
/**
 * An abstract participant type in this business network
 */
abstract participant Business identified by email {
  o String email
  o Address address optional
  o Double accountBalance
}

/**
 * A Manufacturer is a type of participant in the network
 */
participant Manufacturer extends Business {
}

/**
 * A Shipper is a type of participant in the network
 */
participant Shipper extends Business {
}

/**
 * An Wholesaler is a type of participant in the network
 */
participant Wholesaler extends Business {
}

/**
 * A Pharmacy is a type of participant in the network
 */
participant Pharmacy extends Business {
}

/**
 * An IoTDevice is any device that is part of the network
 */
abstract participant IoTDevice identified by deviceId {
  o String deviceId
}

/**
 * An IoT temperature sensor
 */
participant TemperatureSensor extends IoTDevice {
}

/**
 * An IoT GPS Sensor
 */
participant GpsSensor extends IoTDevice {
}

/**
 * JUST FOR INITIALIZING A DEMO
 */
transaction SetupDemo {
}

/**
 * An event - when the temperature goes outside the agreed-upon boundaries
 */
event TemperatureThresholdEvent {
  o String message
  o Double temperature
  --> Shipment shipment
}

/**
 * Event - when the shipment has been packed and is ready for pickup
 */
event ShipmentPackedEvent {
  o String message
  --> Shipment shipment
}

/**
 * Event - when the shipment has been picked up and is ready for loading
 */
event ShipmentPickedupEvent {
  o String message
  --> Shipment shipment
}

/**
 * Event - when the shipment has been loaded onto the cargo ship
 */
event ShipmentLoadedEvent {
  o String message
  --> Shipment shipment
}

/**
 * An event - when the ship arrives at the port
 */
event ShipmentInPortEvent {
  o String message
  --> Shipment shipment
}

/**
 * Event - when the shipment is received
 */
event ShipmentReceivedEvent {
  o String message
  --> Shipment shipment
}
